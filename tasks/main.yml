---
# tasks file for ansible-ip

- name: Verify not attempting to take down the current link
  assert:
    that: >-
      ansible_default_ipv4.alias is not defined
      or ip_link_name != ansible_default_ipv4.alias
      or ip_link_up is not defined or ip_link_up
    msg: cannot take down {{ ip_link_name }}, ansible is using it

- name: gather link information
  shell: |
    set -o pipefail
    linkDetails="$(ip link show {{ ip_link_name }})"
    flags="$(echo "$linkDetails" | sed --quiet 's/.* \(<[^>]*>\).*/\1/p')"
    mtu="$(echo "$linkDetails" | sed --quiet 's/.*mtu \([^ ]*\).*/\1/p')"
    state="$(echo "$linkDetails" | sed --quiet 's/.*state \([^ ]*\).*/\1/p')"
    qlen="$(echo "$linkDetails" | sed --quiet 's/.*qlen \([^ ]*\).*/\1/p')"
    if [[ "$state" == UP ]]; then
      up=true
    else
      up=false
    fi
    if [[ "$flags" =~ NOARP ]]; then
      arp=false
    else
      arp=true
    fi
    printf '{ "up":%s, "arp":%s, "mtu":%d, "txqueuelen":%d }\n' "$up" "$arp" "$mtu" "$qlen"
  args:
    executable: /bin/bash
  register: result
  changed_when: false

- name: store link info
  set_fact:
    ip_current_link: "{{ result.stdout | from_json }}"

- name: Set {{ ip_link_name }} NOARP flag
  when: ip_link_arp is defined and ip_link_arp != none
  command: ip link set {{ ip_link_name }} arp {{ 'on' if ip_link_arp else 'off' }}
  changed_when: ip_link_arp != ip_current_link.arp

- when: ip_link_mtu is defined and ip_link_mtu != none
  block:
    - name: Set {{ ip_link_name }} MTU
      command: ip link set {{ ip_link_name }} mtu {{ ip_link_mtu }}
      changed_when: ip_link_mtu != ip_current_link.mtu

    - name: Ensure correct MTU on network restart for Ubuntu < 20.04
      when: >-
        ansible_distribution == 'Ubuntu' and ansible_distribution_version is version('20.04', '<')
      lineinfile:
        dest: /etc/network/interfaces
        regexp: /usr/sbin/ip link set {{ ip_link_name }} mtu
        line: post-up /usr/sbin/ip link set {{ ip_link_name }} mtu {{ ip_link_mtu }}

    - name: Ensure correct MTU on network restart for Ubuntu 20.04 and later
      when: >-
        ansible_distribution == 'Ubuntu' and ansible_distribution_version is version('20.04', '>=')
      ansible.builtin.template:
        src: etc/netplan/mtu.yaml.j2
        dest: "{{ ip_netplan_mtu_file }}"
        mode: u+r

    - name: Ensure correct MTU on network restart for other than Ubuntu
      when: ansible_distribution != 'Ubuntu'
      lineinfile:
        dest: /etc/sysconfig/network-scripts/ifcfg-{{ ip_link_name }}
        regexp: ^MTU=
        line: MTU={{ ip_link_mtu }}

- when: ip_link_txqueuelen is defined and ip_link_txqueuelen != none
  block:
    - name: Set {{ ip_link_name }} transmission queue length
      command: ip link set {{ ip_link_name }} txqueuelen {{ ip_link_txqueuelen }}
      changed_when: ip_link_txqueuelen != ip_current_link.txqueuelen

    - name: Ensure correct transmission queue length on reboot
      lineinfile:
        dest: "{{ '/etc/network/interfaces' if ansible_distribution == 'Ubuntu' else
                  '/etc/rc.local' }}"
        regexp: /usr/sbin/ip link set {{ ip_link_name }} txqueuelen
        line: /usr/sbin/ip link set {{ ip_link_name }} txqueuelen {{ ip_link_txqueuelen }}
      changed_when: ip_link_txqueuelen != ip_current_link.txqueuelen

- when: ip_link_up is defined and ip_link_up != none
  block:
    - name: Ensure correct state on reboot
      lineinfile:
        dest: /etc/sysconfig/network-scripts/ifcfg-{{ ip_link_name }}
        regexp: ^ONBOOT=
        line: ONBOOT={{ 'yes' if ip_link_up else 'no' }}

    - name: Set {{ ip_link_name }} state
      shell: |
        if [[ '{{ ip_link_up | lower }}' != '{{ ip_current_link.up }}' ]]; then
          if [[ '{{ ip_link_up | lower }}' == true ]]; then
            state=up
          else
            state=down
          fi
          ip link set {{ ip_link_name }} "$state"
        fi
      changed_when: ip_link_up != ip_current_link.up
